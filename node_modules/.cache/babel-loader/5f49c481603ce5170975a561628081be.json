{"ast":null,"code":"import _toConsumableArray from \"/home/enigmatix/React Projects/growtal-35169/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport React from 'react';\nimport { useMemo } from 'react';\nexport var DOTS = '...';\n\nvar range = function range(start, end) {\n  var length = end - start + 1;\n  return Array.from({\n    length: length\n  }, function (_, idx) {\n    return idx + start;\n  });\n};\n\nexport var usePagination = function usePagination(_ref) {\n  var totalCount = _ref.totalCount,\n      pageSize = _ref.pageSize,\n      _ref$siblingCount = _ref.siblingCount,\n      siblingCount = _ref$siblingCount === void 0 ? 1 : _ref$siblingCount,\n      currentPage = _ref.currentPage;\n  var paginationRange = useMemo(function () {\n    var totalPageCount = Math.ceil(totalCount / pageSize); // Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\n\n    var totalPageNumbers = siblingCount + 5;\n    /*\n      If the number of pages is less than the page numbers we want to show in our\n      paginationComponent, we return the range [1..totalPageCount]\n    */\n\n    if (totalPageNumbers >= totalPageCount) {\n      return range(1, totalPageCount);\n    }\n\n    var leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n    var rightSiblingIndex = Math.min(currentPage + siblingCount, totalPageCount);\n    /*\n      We do not want to show dots if there is only one position left \n      after/before the left/right page count as that would lead to a change if our Pagination\n      component size which we do not want\n    */\n\n    var shouldShowLeftDots = leftSiblingIndex > 2;\n    var shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\n    var firstPageIndex = 1;\n    var lastPageIndex = totalPageCount;\n\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      var leftItemCount = 3 + 2 * siblingCount;\n      var leftRange = range(1, leftItemCount);\n      return [].concat(_toConsumableArray(leftRange), [DOTS, totalPageCount]);\n    }\n\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      var rightItemCount = 3 + 2 * siblingCount;\n      var rightRange = range(totalPageCount - rightItemCount + 1, totalPageCount);\n      return [firstPageIndex, DOTS].concat(_toConsumableArray(rightRange));\n    }\n\n    if (shouldShowLeftDots && shouldShowRightDots) {\n      var middleRange = range(leftSiblingIndex, rightSiblingIndex);\n      return [firstPageIndex, DOTS].concat(_toConsumableArray(middleRange), [DOTS, lastPageIndex]);\n    }\n  }, [totalCount, pageSize, siblingCount, currentPage]);\n  return paginationRange;\n};","map":{"version":3,"names":["React","useMemo","DOTS","range","start","end","length","Array","from","_","idx","usePagination","totalCount","pageSize","siblingCount","currentPage","paginationRange","totalPageCount","Math","ceil","totalPageNumbers","leftSiblingIndex","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","firstPageIndex","lastPageIndex","leftItemCount","leftRange","rightItemCount","rightRange","middleRange"],"sources":["/home/enigmatix/React Projects/growtal-35169/frontend/src/components/Pagination/usePagination.js"],"sourcesContent":["import React from 'react';\nimport { useMemo } from 'react';\n\nexport const DOTS = '...';\n\nconst range = (start, end) => {\n    let length = end - start + 1;\n    return Array.from({ length }, (_, idx) => idx + start);\n};\n\nexport const usePagination = ({\n    totalCount,\n    pageSize,\n    siblingCount = 1,\n    currentPage\n}) => {\n    const paginationRange = useMemo(() => {\n        const totalPageCount = Math.ceil(totalCount / pageSize);\n\n        // Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\n        const totalPageNumbers = siblingCount + 5;\n\n        /*\n          If the number of pages is less than the page numbers we want to show in our\n          paginationComponent, we return the range [1..totalPageCount]\n        */\n        if (totalPageNumbers >= totalPageCount) {\n            return range(1, totalPageCount);\n        }\n\n        const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n        const rightSiblingIndex = Math.min(\n            currentPage + siblingCount,\n            totalPageCount\n        );\n\n        /*\n          We do not want to show dots if there is only one position left \n          after/before the left/right page count as that would lead to a change if our Pagination\n          component size which we do not want\n        */\n        const shouldShowLeftDots = leftSiblingIndex > 2;\n        const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\n\n        const firstPageIndex = 1;\n        const lastPageIndex = totalPageCount;\n\n        if (!shouldShowLeftDots && shouldShowRightDots) {\n            let leftItemCount = 3 + 2 * siblingCount;\n            let leftRange = range(1, leftItemCount);\n\n            return [...leftRange, DOTS, totalPageCount];\n        }\n\n        if (shouldShowLeftDots && !shouldShowRightDots) {\n            let rightItemCount = 3 + 2 * siblingCount;\n            let rightRange = range(\n                totalPageCount - rightItemCount + 1,\n                totalPageCount\n            );\n            return [firstPageIndex, DOTS, ...rightRange];\n        }\n\n        if (shouldShowLeftDots && shouldShowRightDots) {\n            let middleRange = range(leftSiblingIndex, rightSiblingIndex);\n            return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\n        }\n    }, [totalCount, pageSize, siblingCount, currentPage]);\n\n    return paginationRange;\n};\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA,OAAO,IAAMC,IAAI,GAAG,KAAb;;AAEP,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAQC,GAAR,EAAgB;EAC1B,IAAIC,MAAM,GAAGD,GAAG,GAAGD,KAAN,GAAc,CAA3B;EACA,OAAOG,KAAK,CAACC,IAAN,CAAW;IAAEF,MAAM,EAANA;EAAF,CAAX,EAAuB,UAACG,CAAD,EAAIC,GAAJ;IAAA,OAAYA,GAAG,GAAGN,KAAlB;EAAA,CAAvB,CAAP;AACH,CAHD;;AAKA,OAAO,IAAMO,aAAa,GAAG,SAAhBA,aAAgB,OAKvB;EAAA,IAJFC,UAIE,QAJFA,UAIE;EAAA,IAHFC,QAGE,QAHFA,QAGE;EAAA,6BAFFC,YAEE;EAAA,IAFFA,YAEE,kCAFa,CAEb;EAAA,IADFC,WACE,QADFA,WACE;EACF,IAAMC,eAAe,GAAGf,OAAO,CAAC,YAAM;IAClC,IAAMgB,cAAc,GAAGC,IAAI,CAACC,IAAL,CAAUP,UAAU,GAAGC,QAAvB,CAAvB,CADkC,CAGlC;;IACA,IAAMO,gBAAgB,GAAGN,YAAY,GAAG,CAAxC;IAEA;AACR;AACA;AACA;;IACQ,IAAIM,gBAAgB,IAAIH,cAAxB,EAAwC;MACpC,OAAOd,KAAK,CAAC,CAAD,EAAIc,cAAJ,CAAZ;IACH;;IAED,IAAMI,gBAAgB,GAAGH,IAAI,CAACI,GAAL,CAASP,WAAW,GAAGD,YAAvB,EAAqC,CAArC,CAAzB;IACA,IAAMS,iBAAiB,GAAGL,IAAI,CAACM,GAAL,CACtBT,WAAW,GAAGD,YADQ,EAEtBG,cAFsB,CAA1B;IAKA;AACR;AACA;AACA;AACA;;IACQ,IAAMQ,kBAAkB,GAAGJ,gBAAgB,GAAG,CAA9C;IACA,IAAMK,mBAAmB,GAAGH,iBAAiB,GAAGN,cAAc,GAAG,CAAjE;IAEA,IAAMU,cAAc,GAAG,CAAvB;IACA,IAAMC,aAAa,GAAGX,cAAtB;;IAEA,IAAI,CAACQ,kBAAD,IAAuBC,mBAA3B,EAAgD;MAC5C,IAAIG,aAAa,GAAG,IAAI,IAAIf,YAA5B;MACA,IAAIgB,SAAS,GAAG3B,KAAK,CAAC,CAAD,EAAI0B,aAAJ,CAArB;MAEA,oCAAWC,SAAX,IAAsB5B,IAAtB,EAA4Be,cAA5B;IACH;;IAED,IAAIQ,kBAAkB,IAAI,CAACC,mBAA3B,EAAgD;MAC5C,IAAIK,cAAc,GAAG,IAAI,IAAIjB,YAA7B;MACA,IAAIkB,UAAU,GAAG7B,KAAK,CAClBc,cAAc,GAAGc,cAAjB,GAAkC,CADhB,EAElBd,cAFkB,CAAtB;MAIA,QAAQU,cAAR,EAAwBzB,IAAxB,4BAAiC8B,UAAjC;IACH;;IAED,IAAIP,kBAAkB,IAAIC,mBAA1B,EAA+C;MAC3C,IAAIO,WAAW,GAAG9B,KAAK,CAACkB,gBAAD,EAAmBE,iBAAnB,CAAvB;MACA,QAAQI,cAAR,EAAwBzB,IAAxB,4BAAiC+B,WAAjC,IAA8C/B,IAA9C,EAAoD0B,aAApD;IACH;EACJ,CAnD8B,EAmD5B,CAAChB,UAAD,EAAaC,QAAb,EAAuBC,YAAvB,EAAqCC,WAArC,CAnD4B,CAA/B;EAqDA,OAAOC,eAAP;AACH,CA5DM"},"metadata":{},"sourceType":"module"}